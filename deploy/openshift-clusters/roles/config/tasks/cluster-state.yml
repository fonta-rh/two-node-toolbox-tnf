---
# Common cluster state management tasks
# Used by both kcli-install and dev-scripts install-dev roles

- name: Check if cluster state directory exists
  stat:
    path: "{{ cluster_state_dir }}"
  register: cluster_state_dir_stat
  delegate_to: localhost
  run_once: true

- name: Create cluster state directory if it doesn't exist
  file:
    path: "{{ cluster_state_dir }}"
    state: directory
    mode: '0755'
  delegate_to: localhost
  run_once: true
  when: not cluster_state_dir_stat.stat.exists

# PHASE 1: DEPLOYING - Before starting OpenShift installation
- name: Update cluster state to deploying phase
  copy:
    content: |
      {
        "topology": "{{ topology }}",
        "installation_method": "{{ installation_method | upper }}",
        "num_masters": {{ num_masters | default(ctlplanes, true) | default(2) }},
        "num_workers": {{ num_workers | default(workers, true) | default(0) }},
        "enable_arbiter": {{ enable_arbiter | default(('true' if topology == 'arbiter' else 'false'), true) | to_json }},
        "num_extra_workers": 0,
        "status": "deploying",
        "deployment_started_at": "{{ now(utc=True).isoformat() }}",
        "deployed_by": "{{ ansible_playbook_name | default(default_playbook_name, true) | default('cluster-deployment') }}"
      }
    dest: "{{ cluster_state_dir }}/{{ cluster_state_filename }}"
    force: yes
  delegate_to: localhost
  run_once: true
  when: 
    - ansible_check_mode == false
    - cluster_state_phase is defined and cluster_state_phase == 'deploying'

- name: Display deploying state update
  debug:
    msg: |
      Cluster state updated to DEPLOYING phase:
      - Configuration: {{ topology }} cluster ({{ installation_method | upper }} installation)
      - Status: DEPLOYING (OpenShift installation in progress)
      - Started at: {{ now(utc=True).isoformat() }}
  run_once: true
  when: cluster_state_phase is defined and cluster_state_phase == 'deploying'

# PHASE 2: DEPLOYED - After successful installation/redeploy
- name: Update cluster state after successful deployment
  copy:
    content: |
      {
        "topology": "{{ topology }}",
        "installation_method": "{{ installation_method | upper }}",
        "num_masters": {{ num_masters | default(ctlplanes, true) | default(2) }},
        "num_workers": {{ num_workers | default(workers, true) | default(0) }},
        "enable_arbiter": {{ enable_arbiter | default(('true' if topology == 'arbiter' else 'false'), true) | to_json }},
        "num_extra_workers": 0,
        "status": "deployed",
        "deployment_started_at": "{{ cluster_deployment_started_at | default(now(utc=True).isoformat()) }}",
        "deployed_at": "{{ now(utc=True).isoformat() }}",
        "deployed_by": "{{ ansible_playbook_name | default(default_playbook_name, true) | default('cluster-deployment') }}"
      }
    dest: "{{ cluster_state_dir }}/{{ cluster_state_filename }}"
    force: yes
  delegate_to: localhost
  run_once: true
  when: 
    - ansible_check_mode == false
    - cluster_state_phase is defined and cluster_state_phase == 'deployed'

- name: Display successful deployment state update
  debug:
    msg: |
      Cluster state updated after successful deployment:
      - Configuration: {{ topology }} cluster ({{ installation_method | upper }} installation)
      - Masters: {{ num_masters | default(ctlplanes, true) | default(2) }}, Workers: {{ num_workers | default(workers, true) | default(0) }}, Arbiter: {% if topology == 'arbiter' %}enabled{% else %}disabled{% endif %}
      - Status: DEPLOYED (cluster successfully running)
      - Deployed at: {{ now(utc=True).isoformat() }}
  run_once: true
  when: cluster_state_phase is defined and cluster_state_phase == 'deployed'

# REDEPLOY handling - Update state for redeploy operations
- name: Update cluster state after successful redeploy
  copy:
    content: |
      {
        "topology": "{{ topology }}",
        "installation_method": "{{ installation_method | upper }}",
        "num_masters": {{ num_masters | default(ctlplanes, true) | default(2) }},
        "num_workers": {{ num_workers | default(workers, true) | default(0) }},
        "enable_arbiter": {{ enable_arbiter | default(('true' if topology == 'arbiter' else 'false'), true) | to_json }},
        "num_extra_workers": 0,
        "status": "deployed",
        "deployment_started_at": "{{ cluster_deployment_started_at | default(now(utc=True).isoformat()) }}",
        "redeployed_at": "{{ now(utc=True).isoformat() }}",
        "deployed_by": "{{ ansible_playbook_name | default(default_playbook_name, true) | default('cluster-redeploy') }}"
      }
    dest: "{{ cluster_state_dir }}/{{ cluster_state_filename }}"
    force: yes
  delegate_to: localhost
  run_once: true
  when: 
    - install_dev_mode is defined and install_dev_mode == 'redeploy'
    - ansible_check_mode == false
    - cluster_state_phase is defined and cluster_state_phase == 'deployed'

- name: Display redeploy state update
  debug:
    msg: |
      Cluster state updated after successful redeploy:
      - Configuration: {{ topology }} cluster ({{ installation_method | upper }} installation)
      - Masters: {{ num_masters | default(ctlplanes, true) | default(2) }}, Workers: {{ num_workers | default(workers, true) | default(0) }}, Arbiter: {% if topology == 'arbiter' %}enabled{% else %}disabled{% endif %}
      - Status: DEPLOYED (cluster successfully redeployed)
      - Redeployed at: {{ now(utc=True).isoformat() }}
  run_once: true
  when: 
    - install_dev_mode is defined and install_dev_mode == 'redeploy'
    - cluster_state_phase is defined and cluster_state_phase == 'deployed' 