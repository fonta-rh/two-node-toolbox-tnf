- hosts: metal_machine
  gather_facts: no
  force_handlers: yes

  # --- Variable Definitions ---
  vars:
    # By default, run in interactive mode. Automation will override this.
    interactive_mode: true
    # Set default installation mode for normal installations
    install_dev_mode: 'install'

  # --- Pre-flight Checks and Confirmation ---
  pre_tasks:
    # The prompt for 'topology' runs when interactive_mode is not defined or is true
    - name: Prompt for the topology
      ansible.builtin.pause:
        prompt: "Enter topology (arbiter or fencing)"
      register: prompt_result
      delegate_to: localhost
      run_once: true
      when: interactive_mode is not defined or interactive_mode | bool

    # Default 'topology' if not interactive or not provided
    - name: Set the topology fact
      ansible.builtin.set_fact:
        topology: "{{ prompt_result.user_input | default('') or topology | default('arbiter') }}"

    - name: Pre-load variables from the 'install-dev' role
      ansible.builtin.include_vars:
        dir: roles/dev-scripts/install-dev/vars
      run_once: true

    - name: CONFIRMATION - Display the chosen config file
      ansible.builtin.debug:
        msg: "The topology is '{{ topology }}', so the selected script will be '{{ config_file.ipi }}'"
      run_once: true
      # Confirmation runs when interactive_mode is not defined or is true
      when: interactive_mode is not defined or interactive_mode | bool

    - name: Wait for user to press Enter to continue
      ansible.builtin.pause:
        prompt: "Please verify the information above is correct. Press Enter to proceed."
      delegate_to: localhost
      run_once: true
      # Final confirmation pause runs when interactive_mode is not defined or is true
      when: interactive_mode is not defined or interactive_mode | bool

  roles:
    - config
    - dev-scripts/install-dev

  tasks:
  - name: "Final verification message"
    ansible.builtin.debug:
      msg: "Installation tasks have completed for topology '{{ topology }}'."

  post_tasks:
  - name: Check if redfish configuration should be offered
    block:
      - name: Get OpenShift cluster version
        ansible.builtin.shell: |
          source ./proxy.env && oc version -o json
        register: oc_version_result
        delegate_to: localhost
        run_once: true
        failed_when: false
        changed_when: false

      - name: Parse OpenShift version
        set_fact:
          ocp_version: "{{ (oc_version_result.stdout | from_json).openshiftVersion }}"
        when: 
          - oc_version_result.rc == 0
          - oc_version_result.stdout is defined
        delegate_to: localhost
        run_once: true

      - name: Check if OpenShift version is 4.19.x
        set_fact:
          is_ocp_4_19: "{{ ocp_version is defined and ocp_version is match('^4\\.19\\..*') }}"
        delegate_to: localhost
        run_once: true

      - name: Prompt user for redfish configuration
        ansible.builtin.pause:
          prompt: |
            Your cluster meets the requirements for automatic redfish stonith configuration:
            Topology: {{ topology }}
            OpenShift Version: {{ ocp_version | default('Could not determine') }}
            
            The redfish role will:
            - Discover all BareMetalHost resources
            - Configure PCS stonith resources using redfish fencing
            - Enable stonith in the cluster
            - Run on localhost using your kubeconfig (no SSH required)
            
            Would you like to run the redfish configuration now? (y/n)
        register: redfish_prompt_result
        delegate_to: localhost
        run_once: true
        when: 
          - interactive_mode is not defined or interactive_mode | bool
          - topology == "fencing"
          - is_ocp_4_19 | default(false)

      - name: Set redfish execution flag
        set_fact:
          should_run_redfish: true
        when: 
          - redfish_prompt_result is defined
          - redfish_prompt_result.user_input | default('') | lower in ['y', 'yes']

      - name: Redfish configuration will be executed
        ansible.builtin.debug:
          msg: |
            The redfish configuration will now be executed using the redfish playbook.
        when: should_run_redfish | default(false)

      - name: Redfish configuration skipped
        ansible.builtin.debug:
          msg: |
            You can run the redfish configuration later by executing: ansible-playbook redfish.yml
        delegate_to: localhost
        run_once: true
        when: 
          - redfish_prompt_result is defined
          - redfish_prompt_result.user_input | default('') | lower not in ['y', 'yes']
          - is_ocp_4_19 | default(false)

    rescue:
      - name: Handle redfish configuration errors
        ansible.builtin.debug:
          msg: |
            An error occurred while checking or running redfish configuration. You can run it manually later with: ansible-playbook redfish.yml
        delegate_to: localhost
        run_once: true

    when: 
      - topology == "fencing"
      - interactive_mode is not defined or interactive_mode | bool

  - name: Check if proxy.env file exists
    ansible.builtin.stat:
      path: "./proxy.env"
    register: proxy_env_stat
    delegate_to: localhost
    run_once: true
    when: should_run_redfish | default(false)

  - name: Confirm to proceed without proxy.env
    ansible.builtin.pause:
      prompt: |
        The proxy.env file is missing. The redfish configuration will likely fail if there is no direct cluster access.
        Do you want to proceed anyway? (y/n)
    register: proceed_without_proxy
    delegate_to: localhost
    run_once: true
    when: 
      - should_run_redfish | default(false)
      - not proxy_env_stat.stat.exists
      - interactive_mode is not defined or interactive_mode | bool

  - name: Abort redfish configuration due to missing proxy.env
    ansible.builtin.fail:
      msg: "Redfish configuration aborted due to missing proxy.env file"
    when: 
      - should_run_redfish | default(false)
      - not proxy_env_stat.stat.exists
      - (proceed_without_proxy.user_input | default('') | lower not in ['y', 'yes'])

  - name: Source proxy.env and extract environment variables
    ansible.builtin.shell: |
      source ./proxy.env && env | grep -E '^(KUBECONFIG|HTTP_PROXY|HTTPS_PROXY|NO_PROXY)='
    register: proxy_env_vars
    delegate_to: localhost
    run_once: true
    when: 
      - should_run_redfish | default(false)
      - proxy_env_stat.stat.exists
    failed_when: false

  - name: Parse environment variables from proxy.env
    ansible.builtin.set_fact:
      redfish_env: "{{ redfish_env | default({}) | combine({item.split('=')[0]: item.split('=')[1:]|join('=')}) }}"
    loop: "{{ proxy_env_vars.stdout_lines | default([]) }}"
    delegate_to: localhost
    run_once: true
    when: 
      - should_run_redfish | default(false)
      - proxy_env_stat.stat.exists
      - proxy_env_vars.stdout_lines is defined

  - name: Execute redfish configuration
    include_role:
      name: redfish
    vars:
      proxy_kubeconfig: "{{ redfish_env.KUBECONFIG | default('') }}"
      proxy_k8s_auth_proxy: "{{ redfish_env.HTTP_PROXY | default('') }}"
      proxy_http_proxy: "{{ redfish_env.HTTP_PROXY | default('') }}"
      proxy_https_proxy: "{{ redfish_env.HTTPS_PROXY | default('') }}"
      proxy_no_proxy: "{{ redfish_env.NO_PROXY | default('') }}"
      ansible_connection: local
      ansible_host: localhost
      ansible_python_interpreter: "{{ ansible_playbook_python }}"
    when: should_run_redfish | default(false)
    run_once: true

  - name: Redfish configuration completed
    ansible.builtin.debug:
      msg: |
        The redfish role has finished configuring stonith resources. Automatic fencing configured using redfish BMC interfaces.
    when: should_run_redfish | default(false)